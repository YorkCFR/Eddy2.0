<?xml version="1.0"?>
<!--
	This defines the Gazebo simulation of Eddy2A (and B).
	Note that the bulk of the robot is not defined here. This defines
	The Gazebo simulation component.

	Revision History

	Version 1.0 - based on the old ros(1) definitions

-->
<robot name="eddy_sim" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:arg name="robot_name" default="Eddy2a" />
  <xacro:property name="robot_name" value="$(arg robot_name)" />

  <xacro:arg name="imu_offset_x" default="0.0" />
  <xacro:property name="imu_offset_x" value="$(arg imu_offset_x)" />
  <xacro:arg name="imu_offset_y" default="0.0" />
  <xacro:property name="imu_offset_y" value="$(arg imu_offset_y)" />
  <xacro:arg name="imu_offset_z" default="0.0" />
  <xacro:property name="imu_offset_z" value="$(arg imu_offset_y)" />

  <!-- so we use the ros planar move plugin as it is general if unrealistic -->
  <gazebo>
    <plugin name="object_controller" filename="libgazebo_ros_planar_move.so">
      <ros>
        <namespace>/${robot_name}</namespace>
      </ros>
      <command_topic>/$(arg robot_name)/cmd_vel</command_topic>
      <odometryTopic>/$(arg robot_name)/odometry</odometryTopic>
      <robot_base_frame>$(arg robot_name)/base_footprint</robot_base_frame>
      <odometry_frame>$(arg robot_name)/odom</odometry_frame>
    </plugin>
  </gazebo>

  <!-- use the new gps plugin -->
  <gazebo reference="gps_link">
    <sensor name="my_gps" type="gps">
      <always_on>true</always_on>
      <update_rate>20.0</update_rate>
      <plugin name="gps_controller" filename="libgazebo_ros_gps_sensor.so">
        <ros>
          <namespace>/$(arg robot_name)</namespace>
          <remapping>gps_controller/out:=gps</remapping>
        </ros>
        <frame_name>$(arg robot_name)/base_footprint</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- IMU frame  -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <pose>0 0 0 0 0 0</pose>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
          <namespace>/$(arg robot_name)</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <frame_name>$(arg robot_name)/base_footprint</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Camera -->
  <gazebo reference="down_camera_link">
    <sensor type="camera" name="camera_underwater">
      <visualize>false</visualize>
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>30</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.002</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <always_on>true</always_on>
        <update_rate>30.0</update_rate>
        <camera_name>/$(arg robot_name)/underwater_camera</camera_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Sonar frame  -->
  <gazebo reference="sonar_link">
    <sensor type="ray" name="sonar">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>1.0</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.6</min>
          <max>140</max>
          <resolution>0.1</resolution>
        </range>
      </ray>
      <plugin name="sonar_plugin" filename="libgazebo_ros_ray_sensor.so">
        <radiation>ultrasound</radiation>
        <output_type>sensor_msgs/Range</output_type>
        <ros>
          <namespace>/$(arg robot_name)</namespace>
          <remapping>~/out:=sonar</remapping>
        </ros>
      </plugin>
    </sensor>
  </gazebo>

</robot>
